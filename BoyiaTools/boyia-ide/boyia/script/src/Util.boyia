// Boolean Object And Null
var true = 1, false = 0, null = 0;
// Touch Event
var TOUCH_DOWN = 1, TOUCH_UP = 2, TOUCH_MOVE = 4;
// PlatformType
var PLATFORM_ANDROID = 0, PLATFORM_IOS = 1, PLATFORM_WINDOWS = 2;
// Util Class
class Util {
    fun log(info) {
        BY_Log(info);
    }
    
    // Return op can be omited
    fun fromJson(info) {
        BY_Json(info);
    }

    // Return op can be omited
    fun toJson(obj) {
        BY_toJson(obj);
    }
    
    // Return op can be omited
    fun instanceof(obj, cls) {
        BY_InstanceOfClass(obj, cls);
    }
    
    fun showToast(info) {
        BY_CallStaticMethod("com/boyia/app/core/BoyiaBridge", "showToast", "(Ljava/lang/String;)V", info);
    }

    fun startApp(info) {
        BY_CallStaticMethod("com/boyia/app/common/utils/BoyiaUtils", "startApp", "(Ljava/lang/String;)V", info);
    }
    
    fun isIOS() {
        return BY_GetPlatformType() == PLATFORM_IOS;
    }
    
    fun isAndroid() {
        return BY_GetPlatformType() == PLATFORM_ANDROID;
    }
    
    fun isWindows() {
        return BY_GetPlatformType() == PLATFORM_WINDOWS;
    }

    fun getOS() {
        if (Util.isIOS()) {
            return "ios";
        }

        if (Util.isAndroid()) {
            return "android";
        }

        if (Util.isWindows()) {
            return "windows";
        }

        return "unknown";
    }

    fun newMicrotask(worker) {
        var task = new(MicroTask);
        task.init(worker);
        return task;
    }

    fun zip(src, dest, password) {
        BY_ZipFile(src, dest, password);
    }

    fun unzip(src, dest, password) {
        BY_UnZipFile(src, dest, password);
    }
}
